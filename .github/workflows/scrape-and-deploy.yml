name: Scrape DSB and Deploy to GitHub Pages

on:
  schedule:
    # Run every 20 minutes
    - cron: "*/20 * * * *"
  workflow_dispatch: # Allow manual trigger

permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  scrape-and-deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Install Playwright Chromium
        run: bunx playwright install chromium --with-deps

      - name: Create credentials file
        run: |
          echo "DSB_USERNAME=${{ secrets.DSB_USERNAME }}" > .env
          echo "DSB_PASSWORD=${{ secrets.DSB_PASSWORD }}" >> .env
        env:
          DSB_USERNAME: ${{ secrets.DSB_USERNAME }}
          DSB_PASSWORD: ${{ secrets.DSB_PASSWORD }}

      - name: Run scraper
        run: bun run scrape

      - name: Create GitHub Pages structure
        run: |
          mkdir -p public
          cp schedule-modifications.json public/
          echo '<!DOCTYPE html>
          <html>
          <head>
            <title>DSB Schedule Modifications</title>
            <meta charset="utf-8">
            <style>
              body { font-family: Arial, sans-serif; margin: 40px; }
              pre { background: #f5f5f5; padding: 20px; overflow-x: auto; }
              .info { background: #e7f3ff; padding: 15px; border-radius: 5px; margin-bottom: 20px; }
            </style>
          </head>
          <body>
            <h1>DSB Schedule Modifications</h1>
            <div class="info">
              <p><strong>API Endpoint:</strong> <code>schedule-modifications.json</code></p>
              <p><strong>Last updated:</strong> <span id="lastUpdate">Loading...</span></p>
              <p><strong>Last scraped:</strong> <span id="lastScrape">Loading...</span></p>
            </div>
            <h2>Raw JSON Data</h2>
            <pre id="jsonData">Loading...</pre>

            <script>
              fetch("schedule-modifications.json")
                .then(response => response.json())
                .then(data => {
                  document.getElementById("lastUpdate").textContent = data.last_update || "N/A";
                  document.getElementById("lastScrape").textContent = data.last_scrape || "N/A";
                  document.getElementById("jsonData").textContent = JSON.stringify(data, null, 2);
                })
                .catch(error => {
                  document.getElementById("jsonData").textContent = "Error loading data: " + error;
                });
            </script>
          </body>
          </html>' > public/index.html

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: "./public"

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
